---
export interface Props {
  id: string;
  title?: string;
}

const { id, title } = Astro.props;
const labelledByAttr = title ? { 'aria-labelledby': `modal-${id}-title` } : {};
---

<div
  id={`modal-${id}`}
  class="modal hidden"
  role="dialog"
  aria-modal="true"
  {...labelledByAttr}
>
  <div class="modal-inner layout">
    <button class="close" aria-label="Close modal">&times;</button>
    {title && <h2 id={`modal-${id}-title`}>{title}</h2>}
    <slot />
  </div>
</div>


<script is:inline>
  document.addEventListener("DOMContentLoaded", () => {
    const modals = document.querySelectorAll(".modal");

    modals.forEach(modal => {
      const id = modal.id.replace("modal-", "");
      const openBtn = document.getElementById(`open-${id}`);
      const closeBtn = modal.querySelector(".close");

      openBtn?.addEventListener("click", (e) => {
        e.preventDefault();
        modal.classList.remove("hidden");
      });

      closeBtn?.addEventListener("click", () => {
        modal.classList.add("hidden");
      });

      modal.addEventListener("click", (e) => {
        if (e.target === modal) modal.classList.add("hidden");
      });

      window.addEventListener("keydown", (e) => {
        if (e.key === "Escape") {
          modal.classList.add("hidden");
        }
      });
    });
  });
</script>




<style>
  .modal {
    position: fixed;
    inset: 0;
    background: rgba(0, 0, 0, 0.75);
    backdrop-filter: blur(8px);
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 1rem;
    transition: opacity 0.3s ease;
    z-index: 9999;
  }

  .modal.hidden {
    display: none;
  }

  .modal-inner {
    background: #1a1a1a;
    color: var(--T1-white);
    padding: 1.5rem;
    max-width: min(650px);
    width: calc(100% - 2em);
    max-height: 90vh;
    overflow-y: auto;
    border-radius: 12px;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);
    text-align: left;
    animation: scaleIn 0.25s ease;
    position: relative;
  }

  @keyframes scaleIn {
    from { transform: scale(0.95); opacity: 0; }
    to { transform: scale(1); opacity: 1; }
  }

  /* âœ… Force white headings inside the modal */
  :global(.modal-inner.layout :is(h1, h2, h3)) {
    color: white !important;
  }


  .modal-inner section {
    margin-bottom: 2rem;
  }

  .modal-inner section:last-child {
    margin-bottom: 0;
  }

  .modal-inner p,
  .modal-inner ul {
    margin: 0 0 1rem 0;
    line-height: 1.6;
  }

  .modal-inner ul {
    padding-left: 1.25rem;
    list-style-type: disc;
  }

  .modal-inner ul ul {
    list-style-type: circle;
  }

  .modal-inner li {
    margin-bottom: 0.5rem;
  }

  :global(.modal-inner a) {
    color: #78a9ff;
    text-decoration: underline;
    word-break: break-word;
  }

  :global(.modal-inner a:hover) {
    color: var(--T1-white);
    text-decoration: underline;
    word-break: break-word;
  }

  :global(.modal-inner h3) {
    margin-top: 1.5em;
  } 

  .close {
    position: absolute;
    top: 1rem;
    right: 1rem;
    background: none;
    color: #ccc;
    border: none;
    font-size: 1.5rem;
    cursor: pointer;
  }
</style>