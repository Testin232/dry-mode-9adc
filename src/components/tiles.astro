---
export const hydrate = true;
---

<section class="services-section layout">
  <div class="heading-with-toggle">
    <h2>Explore Services</h2>
    <label class="switch">
      <input type="checkbox" id="toggle-details" />
      <span class="slider"></span>
    </label>
  </div>

  <div class="grid" id="tile-grid">
    <slot />
  </div>
</section>

<script type="module">
  setTimeout(() => {
    const toggleEl = document.getElementById('toggle-details');
    const tiles = document.querySelectorAll('#tile-grid .tile');

    if (!toggleEl || tiles.length === 0) return;

    function isExpanded(tile) {
      const details = tile.querySelector('.details');
      return details && details.style.display === 'block';
    }

    function updateSwitchVisualState() {
      const allExpanded = Array.from(tiles).every(isExpanded);
      toggleEl.checked = allExpanded;
    }

    tiles.forEach(tile => {
      tile.addEventListener('click', () => {
        const details = tile.querySelector('.details');
        if (!details) return;
        const isVisible = details.style.display === 'block';
        details.style.display = isVisible ? 'none' : 'block';
        tile.classList.toggle('expanded', !isVisible);
        updateSwitchVisualState();
      });
    });

    toggleEl.addEventListener('change', () => {
      const shouldShow = toggleEl.checked;
      tiles.forEach(tile => {
        const details = tile.querySelector('.details');
        if (!details) return;
        details.style.display = shouldShow ? 'block' : 'none';
        tile.classList.toggle('expanded', shouldShow);
      });
    });
  }, 0);
</script>




<style>
  :global(.services-section) {
    padding: 0;
    margin: 0;
  }

  :global(.heading-with-toggle) {
    display: flex;
    align-items: center; /* ✅ Switch and text aligned */
    gap: 1rem;
    margin-top(var(--heading-margin-top) - 1px);
    margin-bottom: 1rem;
  }

  :global(.heading-with-toggle h2) {
    margin: 0;
  }

  :global(.grid) {
    display: grid;
    gap: 0.75rem;
    grid-template-columns: 1fr;
    max-width: 860px;
    margin: 0 auto;
  }

  :global(.tile .details) {
    display: none;
    font-size: 0.95rem;
  }

  


  /*-----------------------*/
  /*-----------------------*/
  /*Tiles styling below----*/

  :global(.tile) {
    background: var(--T1-white);
    border: 1px solid #bebebe;
    border-radius: 1px;
    padding: 0.5rem 0.6rem;/* to get the same margin, due to H3-settings, we need different X and Y values */
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    transition: all 0.2s ease;
    cursor: pointer;
    color: #111; /* Optional: Ensures dark text on white */
  }

  :global(.tile:not(.expanded):hover) {
    background: var(--T1-white);
    border-color: var(--T1-tile-hover-border);
    border-width: 1px;
    box-shadow: 0 8px 20px rgba(0, 0, 0, 0.15);
    transform: translateY(-2px);
  }


  :global(.tile.expanded) {
    background: var(--T1-white);
    border: 1px solid #bebebe;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.15);
    padding-bottom: 0.3rem; /* reduce from original 0.6rem */
  }

  :global(.tile.expanded .details) {
    color: #111;
    margin-top: 0.6rem; /* or 0 if you want ultra tight */
    padding: 0;
    line-height: 1.3;
    text-align: justify; /* 👈 Add this line */
  }

/* ──────────────────────────────────────────────────── */
/* 1. Switch container: sets size & positioning context */
/* ──────────────────────────────────────────────────── */
:global(.switch) {
  position: relative;
  display: inline-block;
  width: 44px;
  height: 24px;
}

/* ──────────────────────────────────────────────────── */
/* 2. Hide the native checkbox input                      */
/* ──────────────────────────────────────────────────── */
:global(.switch input) {
  opacity: 0;
  width: 0;
  height: 0;
}

/* ──────────────────────────────────────────────────── */
/* 3. Slider track (the “background” pill)              */
/* ──────────────────────────────────────────────────── */
:global(.slider) {
  position: absolute;
  inset: 0;                         /* top:0; right:0; bottom:0; left:0 */
  background-color: var(--T1-switch-off-bgd);
  border: 1px solid #bebebe;
  border-radius: 999px;
  cursor: pointer;
  transition: all 0.2s ease;
  box-shadow:
    inset 0 1px 2px rgba(0,0,0,0.05),
    0 1px 2px rgba(0,0,0,0.08);
}



/* ──────────────────────────────────────────────────── */
/* 4. Slider thumb (the circular knob)                 */
/* ──────────────────────────────────────────────────── */
:global(.slider:before) {
  content: "";
  position: absolute;
  width: 16px;
  height: 16px;

  /* use the computed padding */
  top: 3px;        /* = (22–16)/2 */
  left: 3px;       /* = (22–16)/2 */

  border-radius: 50%;
  background-color: var(--T1-switch-off-circle);
  transition: transform 0.2s ease;
  box-shadow: 0 1px 3px rgba(0,0,0,0.20);
}

/* ──────────────────────────────────────────────────── */
/* 5. Hover state: lift effect                         */
/* ──────────────────────────────────────────────────── */
/* hover lift effect (optional) */
:global(.switch:hover .slider) {
  transform: translateY(-1px);
  box-shadow:
    inset 0 1px 2px rgba(0,0,0,0.05),
    0 4px 10px rgba(0,0,0,0.10);
}

/* ──────────────────────────────────────────────────── */
/* 6. Checked (ON) state: change track & move knob     */
/* ──────────────────────────────────────────────────── */
/* checked state */
:global(input:checked + .slider) {
  background-color: var(--T1-switch-on-bgd);
  border-color: var(--T1-switch-on-border);
}

:global(input:checked + .slider:before) {
  transform: translateX(20px);   /* = 42–16–2·3 */
  background-color: var(--T1-switch-on-circle);
}

/* On hover, if switch is OFF (input not checked), make the track border red */
:global(.switch:hover input:not(:checked) + .slider) {
  border-color: var(--T1-tile-hover-border);
}

</style>
