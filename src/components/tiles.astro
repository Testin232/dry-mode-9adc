---
export const hydrate = true;
---

<section class="services-section layout">
  <div class="heading-with-toggle">
    <h2>Explore Services</h2>
    <label class="switch">
      <input type="checkbox" id="toggle-details" />
      <span class="slider"></span>
    </label>
  </div>

  <div class="grid" id="tile-grid">
    <slot />
  </div>
</section>

<script type="module">
  setTimeout(() => {
    const toggleEl = document.getElementById('toggle-details');
    const tiles = document.querySelectorAll('#tile-grid .tile');

    if (!toggleEl || tiles.length === 0) return;

    function isExpanded(tile) {
      const details = tile.querySelector('.details');
      return details && details.style.display === 'block';
    }

    function updateSwitchVisualState() {
      const allExpanded = Array.from(tiles).every(isExpanded);
      toggleEl.checked = allExpanded;
    }

    tiles.forEach(tile => {
      tile.addEventListener('click', () => {
        const details = tile.querySelector('.details');
        if (!details) return;
        const isVisible = details.style.display === 'block';
        details.style.display = isVisible ? 'none' : 'block';
        tile.classList.toggle('expanded', !isVisible);
        updateSwitchVisualState();
      });
    });

    toggleEl.addEventListener('change', () => {
      const shouldShow = toggleEl.checked;
      tiles.forEach(tile => {
        const details = tile.querySelector('.details');
        if (!details) return;
        details.style.display = shouldShow ? 'block' : 'none';
        tile.classList.toggle('expanded', shouldShow);
      });
    });
  }, 0);
</script>




<style>
  :global(.services-section) {
    padding: 0;
    margin: 0;
  }

  :global(.heading-with-toggle) {
    display: flex;
    align-items: center; /* ✅ Switch and text aligned */
    gap: 1rem;
    margin-top(var(--heading-margin-top) - 1px);
    margin-bottom: 1rem;
  }

  :global(.heading-with-toggle h2) {
    margin: 0;
  }

  :global(.grid) {
    display: grid;
    gap: 1rem;
    grid-template-columns: 1fr;
    max-width: 860px;
    margin: 0 auto;
  }

  :global(.tile .details) {
    display: none;
    font-size: 0.95rem;
  }


  /*-----------------------*/
  /*-----------------------*/
  /*Tiles styling below----*/

  :global(.tile) {
    background: var(--T1-white);
    border: 1px solid #bebebe;
    border-radius: 1px;
    padding: 0.6rem;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    transition: all 0.2s ease;
    cursor: pointer;
    color: #111; /* Optional: Ensures dark text on white */
  }

  :global(.tile:not(.expanded):hover) {
    background: var(--T1-white);
    border-color: var(--T1-tile-hover-border);
    border-width: 1px;
  }

  :global(.tile.expanded) {
    background: var(--T1-white);
    border: 1px solid #ccc;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.15);
    padding-bottom: 0.3rem; /* reduce from original 0.6rem */
  }

  :global(.tile.expanded .details) {
    color: #111;
    margin-top: 0.6rem; /* or 0 if you want ultra tight */
    padding: 0;
    line-height: 1.3;
  }

  /*-----------------------*/
  /*-----------------------*/
  /*Switch & slider styling below*/
  :global(.switch) {
    position: relative;
    display: inline-block;
    width: 44px;
    height: 24px;
    vertical-align: middle;
  }

  :global(.switch input) {
    opacity: 0;
    width: 0;
    height: 0;
  } 

  :global(.slider) {
    position: absolute;
    cursor: pointer;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: var(--T1-switch-off-bgd); /* soft blue-gray */
    border: 1px solid var(--T1-switch-off-border);
    border-radius: 999px;
    transition: all 0.2s ease;
    box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.05);
  }

  :global(.slider:before) {
    content: "";
    position: absolute;
    height: 16px;
    width: 16px;
    left: 4px;
    top: 3.5px;
    background-color: var(--T1-switch-off-circle); /* modern blue */
    border-radius: 50%;
    transition: transform 0.2s ease;
  }

  :global(input:checked + .slider) {
    background-color: var(--T1-switch-on-bgd); /* brighter when active */
    border-color: var(--T1-switch-on-border);
  }

  :global(input:checked + .slider:before) {
    transform: translateX(20px);
    background-color: var(--T1-switch-on-circle);
  }







/* Switch track */
:global(.slider) {
  /* …existing props… */
  box-shadow:
    inset 0 1px 2px rgba(0, 0, 0, 0.05), /* your existing inner shadow */
    0 2px 4px rgba(0, 0, 0, 0.1);          /* new outer drop-shadow */
}

/* Switch thumb (the circle) */
:global(.slider:before) {
  /* …existing props… */
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2); /* subtle shadow under the knob */
}

/* Heavier “lift” on switch hover */
:global(.switch:hover .slider) {
  /* keep the inset, but beef up the outer shadow to match tiles */
  box-shadow:
    inset 0 1px 2px rgba(0, 0, 0, 0.05),
    0 8px 20px rgba(0, 0, 0, 0.15);
  transform: translateY(-1px);
}

/* Optionally, also give the thumb a stronger shadow on hover */
:global(.switch:hover .slider:before) {
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
}


:global(.tile:not(.expanded):hover) {
  background: var(--T1-white);
  border-color: var(--T1-tile-hover-border);
  /* heavier drop-shadow on hover */
  box-shadow: 0 8px 20px rgba(0, 0, 0, 0.15);
  transform: translateY(-2px);
}

:global(.tile.expanded:hover) {
  /* for expanded tiles, a slightly subtler but still noticeable hover shadow */
  box-shadow: 0 6px 16px rgba(0, 0, 0, 0.12);
  transform: translateY(-1px);
}


</style>
